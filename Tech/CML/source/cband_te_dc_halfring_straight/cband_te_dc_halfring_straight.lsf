##################################################################

# Copyright (c) 2003-2020, Ansys, Inc. All rights reserved.  

# Unauthorized use, distribution, or duplication is prohibited.  
# This product is subject to U.S. laws governing export and re-export.  

# For full Legal Notice, see documentation.

##################################################################

# Port list
ports = cell(4);
p = struct; p.name = "opt1";    p.dir = "Bidirectional"; p.type = "Optical Signal";    p.pos = "Left";   p.loc = 0.5; ports{1} = p;
p = struct; p.name = "opt2";    p.dir = "Bidirectional"; p.type = "Optical Signal";    p.pos = "Top";   p.loc = 0.1; ports{2} = p;
p = struct; p.name = "opt3";    p.dir = "Bidirectional"; p.type = "Optical Signal";    p.pos = "Right";   p.loc = 0.5; ports{3} = p;
p = struct; p.name = "opt4";    p.dir = "Bidirectional"; p.type = "Optical Signal";    p.pos = "Top";   p.loc = 0.9; ports{4} = p;

# General
description = "SiEPIC EBeam element: TE C-band Half Ring Directional Coupler";	# Please give a brief description, e.g., "Grating coupler for TE mode"
prefix = "DC";
photonic_model = "compound_element"; # Photonic model used in the element.

# Load data from file (optional)
jsonload(source_directory + "/cband_te_dc_halfring_straight_source_data.json");

# CML - list all properties that are used to parameterize the model (optional)
parameters = cell(5);

par = struct;
par.name = "wg_width";
par.category = "Ring";
par.type = "Number";
par.kind = "Distance";
par.unit = "um";
par.choices = "";
par.min = 0.1e-6;
par.max = 10e-6;
par.annotate = true;
par.default_value = 0.5e-6;
par.visible_to_user = true;
par.test_min = 0.5e-6;
par.test_max = 1e-6;
parameters{1} = par;

par = struct;
par.name = "wg_thickness";
par.category = "Ring";
par.type = "Number";
par.kind = "Distance";
par.unit = "um";
par.choices = "";
par.min = 0e-6;
par.max = 1e-6;
par.annotate = true;
par.default_value = 0.22e-6;
par.visible_to_user = true;
par.test_min = 0.21e-6;
par.test_max = 0.23e-6;
parameters{2} = par;

par = struct;
par.name = "gap";
par.category = "Ring";
par.type = "Number";
par.kind = "Distance";
par.unit = "um";
par.choices = "";
par.min = 0e-6;
par.max = 10000e-6;
par.annotate = true;
par.default_value = 0.2e-6;
par.visible_to_user = true;
par.test_min = 0.18e-6;
par.test_max = 0.22e-6;
parameters{3} = par;

par = struct;
par.name = "radius";
par.category = "Ring";
par.type = "Number";
par.kind = "Distance";
par.unit = "um";
par.choices = "";
par.min = 0e-6;
par.max = 10000e-6;
par.annotate = true;
par.default_value = 18e-6;
par.visible_to_user = true;
par.test_min = 10e-6;
par.test_max = 20e-6;
parameters{4} = par;

par = struct;
par.name = "Lc";
par.category = "Ring";
par.type = "Number";
par.kind = "Distance";
par.unit = "um";
par.choices = "";
par.min = 0e-6;
par.max = 10000e-6;
par.annotate = true;
par.default_value = 0e-6;
par.visible_to_user = true;
par.test_min = 0e-6;
par.test_max = 10e-6;
parameters{5} = par;


# Set-up script: create the string "setup_script" to be loaded into the Compound Element Setup Script (optional)
# "setup_script" string can either be defined in this file or imported from another file.
# To import the string from another file, use command "feval".
# The set-up script must be self-contained: 
#    - All required data for the model must be included in the string
#    - It can reference user-defined parameters and statistical parameters (see "parameters" cell above and "stat_parameters" cell in the json data file) 

lut_filename = "te_ebeam_dc_halfring_straight.xml";

setup_script_file="cband_te_dc_halfring_straight_setup_script.lsf";
feval(source_directory+"/"+setup_script_file);

feval(source_directory+"/cp_spar_files.lsfx");

# CML/notes		# Feel free to add notes as you see fit
# Warning: Do not use as property the name of an existing parameter
notes = cell(3);
notes{1} = struct;
notes{1}.property = "Pcell";
notes{1}.value = "This is a parameterized model based on S-parameters.";
notes{2} = struct;
notes{2}.property = "wavelength_range";
notes{2}.value = "C-band"; #should be consistent with data available in txt file
notes{3} = struct; 		# Please follow the same syntax as note_1
notes{3}.property = "polarization";
notes{3}.value = "TE";

# Custom QA (optional)
#custom_qa_filenames = cell(1); 
#custom_qa_filenames{1} = "cband_te_bragg_custom_qa.lsf";


# Determine where to get the compound information
get_compound="script" ; # "script" or "file" 
debug_mode=false;


# internal circuit
elements=cell(1);

elements{1}=struct;
elements{1}.element="Optical N Port S-Parameter";
elements{1}.name="SPAR_1";
elements{1}.property=cell(3);
elements{1}.property{1}=struct;
elements{1}.property{1}.name="load from file";
elements{1}.property{1}.value=true;
elements{1}.property{2}=struct;
elements{1}.property{2}.name="s parameters filename";
elements{1}.property{2}.value=source_directory+"/te_ebeam_dc_halfring_straight_gap=200nm_radius=18um_width=500nm_thickness=220nm_CoupleLength=0um.txt";
elements{1}.property{3}=struct;
elements{1}.property{3}.name="load from file";
elements{1}.property{3}.value=false;

connection=cell(4);

connection{1}=struct;
connection{1}.e1_name="SPAR_1";
connection{1}.e1_port="port 1";
connection{1}.e2_name="DC";
connection{1}.e2_port="opt1";

connection{2}=struct;
connection{2}.e1_name="SPAR_1";
connection{2}.e1_port="port 2";
connection{2}.e2_name="DC";
connection{2}.e2_port="opt2";

connection{3}=struct;
connection{3}.e1_name="SPAR_1";
connection{3}.e1_port="port 3";
connection{3}.e2_name="DC";
connection{3}.e2_port="opt3";

connection{4}=struct;
connection{4}.e1_name="SPAR_1";
connection{4}.e1_port="port 4";
connection{4}.e2_name="DC";
connection{4}.e2_port="opt4";